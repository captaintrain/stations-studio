/* globals Github, Papa */

import Ember from 'ember';
import computed from 'ember-computed';
import service from 'ember-service/inject';
import Service from 'ember-service';

function parseCSV(contents) {
  return new Ember.RSVP.Promise(function(resolve, reject){
    let result = [];
    Papa.parse(contents, {
      header: true,
      complete: resolve(result),
      error: reject,
      step(row) {
        if(row.data[0].id) {
          result.push(row.data[0]);
        }
      }
    });
  });
}

function getFileSha(tree) {
  return new Ember.RSVP.Promise(function(resolve, reject){
    let file_found = false;
    for(let i = 0; i < tree.length; i++) {
      if(tree[i].path === "stations.csv") {
        resolve(tree[i].sha);
      }
    }
    if(!file_found) {
      reject("stations.csv was not found in the tree");
    }
  });
}

function handleError(err) {
  Ember.Logger.error("Error while trying to get stations.csv", err);
}

export default Service.extend({
  all: computed(function() { return []; }),
  isLoaded: false,
  diff: [],
  repo: null,
  user: service(),

  load() {
    if(this.isLoaded) {
      return Ember.RSVP.resolve(this.get('all'));
    }

    let github = new Github({
        token: this.get("user.token"),
        auth: "oauth"
    });

    let repo = github.getRepo('trainline-eu', 'stations');
    this.set('repo', repo);
    let getTree = Ember.RSVP.denodeify(repo.getTree);
    let getBlob = Ember.RSVP.denodeify(repo.getBlob);

    // Used for debugging purposes to save some time
    // var requestPromise = new Ember.RSVP.Promise(function(resolve, reject) {
    //   Ember.$.get("stations.csv", resolve).fail(reject);
    // });

     return getTree('master')
     .then(getFileSha)
     .then(getBlob)
     .then(parseCSV)
     .then((stations) => {
       this.set('all', stations);
       this.set('isLoaded', true);
       Ember.Logger.info(this.get('all').length + ' stations loaded.');
       return stations;
     }).catch(handleError);
  },

  findById(id) {
    return this.get('all').findBy('id', id);
  },

  update(station, field, value){
    let diffs = this.get('diff');
    let diff = Ember.Object.create({
      id: station.id,
      name: station.name,
      field: field,
      originalValue: station[field],
      newValue: value
    });
    diffs.pushObject(diff);
    Ember.set(station, field, value);
  },

  changelog() {
    return this.get('diff');
  },

  getCSV() {
    return Papa.unparse(this.get('all'), {
      header: true,
      delimiter: ";",
      newline: "\n"
    }) + "\n";
  },

  createPullRequest(branchName, commitMessage) {
    let repo = this.get('repo');

    let branch = Ember.RSVP.denodeify(repo.branch.bind(repo)),
    getRef = Ember.RSVP.denodeify(repo.getRef),
    getCommit = Ember.RSVP.denodeify(repo.getCommit),
    postBlob = Ember.RSVP.denodeify(repo.postBlob),
    updateTree = Ember.RSVP.denodeify(repo.updateTree),
    commit = Ember.RSVP.denodeify(repo.commit),
    updateHead = Ember.RSVP.denodeify(repo.updateHead),
    createPR = Ember.RSVP.denodeify(repo.createPullRequest);

    return branch('master', branchName)
    .then(() => {
      return getRef(`heads/${branchName}`);
    }).then((lastCommitSHA) => {
      return getCommit(branchName, lastCommitSHA)
      .then((tree) => {
        return postBlob(this.getCSV())
        .then((blobSHA) => {
          return updateTree(tree.sha, "stations.csv", blobSHA);
        });
      }).then((newTreeSHA) => {
        return commit(lastCommitSHA, newTreeSHA, commitMessage);
      });
    }).then((newCommitSHA) => {
      return updateHead(branchName, newCommitSHA);
    }).then(() => {
      let params = {
        title: commitMessage,
        body: "This pull request has been automatically generated by Station Studio",
        base: "master",
        head: `trainline-eu:${branchName}`
      };
      return createPR(params);
    });
  },

});
